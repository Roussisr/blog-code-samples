AWSTemplateFormatVersion: "2010-09-09"
Description: "Sample Service"

Parameters:

  Stage:
    Type: String
    Description: "Deployment stage name."
    Default: test

  ProjectName:
    Type: String
    Description: Name of the project.
    MinLength: "1"
    MaxLength: "20"
    AllowedPattern: "[A-Za-z0-9-]+"
    ConstraintDescription: Malformed input parameter.
    Default: sample-service

  ArtifactS3Bucket:
    Type: String
    Description: Artifact S3 bucket 
  LambdaS3Key:
    Type: String
    Description: Artifact object key

Resources:

  Lambda:
    Type: AWS::Lambda::Function
    DependsOn: [LambdaRole]
    Properties:
      FunctionName: !Sub "${ProjectName}-lambda-${AWS::Region}-${Stage}"
      Runtime: nodejs8.10
      Handler: index.handler
      Environment:
        Variables:
          CURRENT_SERVICE_VERSION: v1
      MemorySize: 1024
      Timeout: 120
      Role: !GetAtt LambdaRole.Arn
      Code:
        S3Bucket: !Ref ArtifactS3Bucket
        S3Key: !Ref LambdaS3Key

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-lambda-role-${AWS::Region}-${Stage}"
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Policies:
      - PolicyName: LambdaExecutionPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action: ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"]
            Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
            Effect: Allow

  Api:
    Type: AWS::ApiGateway::RestApi
    DependsOn: [ApiRole, Lambda]
    Properties:
      Name: !Sub "${ProjectName}-api-${AWS::Region}-${Stage}"
      Body:
        swagger: "2.0"
        info:
          title: !Sub "${ProjectName}-api-${AWS::Region}-${Stage}"
        basePath: /
        schemes:
        - https
        paths:
          /:
            get:
              x-amazon-apigateway-integration:
                uri:
                  !Sub
                  - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
                  - { LambdaArn: !GetAtt Lambda.Arn}
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
                passthroughBehavior: when_no_match
                credentials: !GetAtt ApiRole.Arn
                
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-api-role-${AWS::Region}-${Stage}"
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
      Path: "/"
      Policies:
      - PolicyName: !Sub "${ProjectName}-api-policy-${AWS::Region}-${Stage}"
        PolicyDocument:
          Statement:
          - Action: ["lambda:Invoke*"]
            Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Lambda}*"
            Effect: Allow
          - Action: ["cloudwatch:*"]
            Resource: "arn:aws:cloudwatch:*"
            Effect: Allow

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: [Api]
    Properties:
      RestApiId: !Ref Api
      StageName: !Ref Stage

Outputs:

  ApiUrl:
    Description: "URL of the Sample Service API"
    Value: !Join
      - ''
      - - https://
        - !Ref Api
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/'
        - !Ref Stage
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"